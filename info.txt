git branch <name> 
создать ветку
-r - вывести все удаленные ветки
-а - вывести все ветки
-d <name> - удаление ветки


git checkout <name> - переключиться на ветку
-b - создаем новую ветку и переключаемся на нее

git log 
-n 5 -вывести последние 5 коммитов
--pretty (oneline,short,medium) - вывести красиво
-p - показывает изменения в отдельном коммите



git diff hash1 hash2 - просмотр изменений между 2 коммитами


gir rm <name> - удаление файла
-f - насильное


git restore <name> - восстанавливает файл из индекса


git checkout HEAD~2 - на 2 коммита назад
git checkout HEAD^ - на один коммит назад


git revert <commit adress>

-n
Не делает коммит. С данным ключом изменения 
коснутся только рабочей копии.

--abort
Данный ключ используется только при 
разрешении конфликтов.Останавливает откат если ты сначала
захотел решить конфликт и только потом отменить коммит
Прерывает выполнение команды после разрешения 
конфликтов.

--continue
Данный ключ используется только при разрешении
конфликтов.
Продолжает выполнение команды после разрешения
конфликтов.



git reset <commit adress> 
Переносит указатель ветки на переданный коммит.

--soft
С этим ключом, команда не отменяет изменения ни в индексе, 
ни в рабочей копии. Все ваши файлы останутся в том же 
состоянии, в котором были, но указатель ветки будет передвинут.

--hard
С этим ключом команда удалит все изменения так, чтобы 
состояние индекса и рабочей копии полностью соответствовали 
коммиту, к которому мы сделали reset

в отличии от checkout наш указатель на ветку переноситься
также а на месте коммита от которого мы делали reset 
появляется другой указатель ORIG_HEAD

И если из такого положения мы начнем создавать коммиты то 
они пойдут по другой ветке




git commit 
-С
С этим ключом, команда, создавая новый коммит, возьмет 
сообщение и информацию об авторе из переданного коммита.


--amend
С этим ключом коммит будет объединен с последним коммитом 
на текущей ветке. Этот ключ используется для редактирования 
содержимого и сообщения последнего коммита.


Теперь, когда мы познакомились с новыми ключами, можем перейти 
к редактированию последнего коммита. Последовательность действий 
в данной ситуации такая:

Откатиться к предпоследнему коммиту командой 
git reset --soft HEAD^
Добавить в коммит новые файлы, если вам это нужно, 
использовав команду git add.
Выполнить git commit -c ORIG_HEAD, если вы хотите 
отредактировать сообщение, или git commit -C ORIG_HEAD, 
если вы хотите оставить сообщение коммита без изменений.




Чтобы обьеденить несколько последних коммитов в один

Выполните git reset --soft HEAD~n, где n это число коммитов, 
которые вы хотите объединить. Эта команда вернет указатель 
ветки на n коммитов назад, оставив изменения в индексе и 
рабочей копии нетронутыми. То есть после выполнения этой команды
вы откатитесь на n коммитов назад, но все изменения внесенные 
этими коммитами останутся у вас в рабочей копии и индексе.

Выполните git commit -c ORIG_HEAD, а затем отредактируйте 
сообщение коммита должным образом. Эта команда сделает коммит 
всех изменений в индексе. То есть она сделает коммит, который 
по своему содержимому представляет объединение последних n 
коммитов.




Если нужно все вернуть можно просто(даже после -hard)
git reset ORIG_HEAD 



Работа этой команды зависит от вызова. Если вызвать 
git reset <ссылка>, то команда переместит ветку, на которую 
указывает HEAD, на переданную ссылку. Затем, в зависимости от 
опций --soft/--hard/--mixed, команда:
либо останавливается,
либо обновляет индекс и рабочую копию так, чтобы они 
соответствовали текущему коммиту,
либо обновляет только индекс соответственно.


То есть она изменит историю, исключив из нее все коммиты, оставшиеся после HEAD. Говоря проще, команда действует так:
Перемещает ветку, на которую указывает HEAD, или только HEAD (если он находится в состоянии detached HEAD). Останавливается на этом шаге, если передан ключ --soft.
Делает индекс таким же, как в коммите, на который указывает HEAD. Останавливается на этом шаге, если не передан ключ --hard.
Делает рабочую копию такой же, как коммит, на который указывает HEAD





git revert 
Данная команда создает новый коммит, который отменяет 
действие одного из предыдущих коммитов. То есть новый 
коммит появится в истории, а предыдущие коммиты не изменятся.




Команда git restore

Копирует файл из переданной ссылки в рабочую копию, индекс 
или сразу и туда, и туда. Изначально эта команда появилась, 
как аналог git checkout <ссылка> <имя файла>, но ее функционал 
немного шире. Данная команда также не меняет историю.

Команда git restore задумывалась как аналог 
git checkout <ссылка> <имя файла>. Тем не менее, между ними 
есть следующие отличия:
Используя git checkout <ссылка> <имя файла>, в качестве 
ссылки вы можете передать только определенный коммит, в то
 время как git restore может скопировать файл в рабочую копию 
 прямо из индекса
Команда git checkout всегда копирует файлы одновременно и в 
рабочую копию, и в область индекса, что не всегда удобно. В 
свою очередь, git restore может принять ключи --staged и 
--worktree, определяющие, скопировать файл только в область 
индекса, только в рабочую копию, или сразу в оба места.

